import React, { FunctionComponent } from "react";
import { TextAreaProps as AntTextAreaProps } from "antd/lib/input";
import { Radio } from "antd";
import { FormItem } from "@components/FormItem";
import { FormItemProps } from "antd/lib/form";

interface BooleanChoiceProps {
	rows?: AntTextAreaProps["rows"];
	value?: AntTextAreaProps["value"];
	label: string;
	/**
	 * Controls wheter the input can be interacted with or not.
	 * This differs from setting `disabled` to `true` in that by
	 * setting this option to true will remove any styling from the
	 * input that makes it look like an input.
	 */
	isDisplay?: boolean;
	/**
	 * Specifis whether the input has validation feedback
	 */
	hasFeedback?: FormItemProps["hasFeedback"];
	/**
	 * The prompt message. If not provided, the prompt message will be generated by the validation rule.
	 */
	help?: FormItemProps["help"];
	/**
	 * The result of the validation rules
	 */
	validateStatus?: "error" | "";
	disabled?: boolean;
	required?: boolean;
	/**
	 * Optional description to provide more information about the input
	 */
	description?: string;
	/**
	 * Form item name
	 */
	name?: FormItemProps["name"];
}

export const BooleanChoice: FunctionComponent<BooleanChoiceProps> = ({
	label,
	isDisplay,
	value,
	hasFeedback,
	validateStatus,
	disabled,
	description,
	name,
	help,
}) => {
	return (
		<FormItem
			isDisplay={isDisplay}
			label={label}
			value={value}
			hasFeedback={hasFeedback}
			validateStatus={validateStatus}
			disabled={disabled}
			description={description}
			name={name}
			help={help}
		>
			<Radio.Group buttonStyle="solid" value={value}>
				<Radio.Button value={true}>yes</Radio.Button>
				<Radio.Button value={false}>no</Radio.Button>
			</Radio.Group>
		</FormItem>
	);
};
