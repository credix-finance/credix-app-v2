import React from "react";
import { Form } from "antd";
import { InputProps as AntInputProps } from "antd/lib/input";
import { FormItemProps as AntFormItemProps } from "antd/lib/form";
import { classNames } from "@utils/format.utils";

interface FormItemProps {
	/**
	 * Label text
	 */
	label: AntFormItemProps["label"];
	/**
	 * Name text
	 */
	name?: AntFormItemProps["name"];
	/**
	 * Optional description to provide more information about the input
	 */
	description?: string;
	/**
	 * Specifis whether the input has validation feedback
	 */
	hasFeedback?: AntFormItemProps["hasFeedback"];
	/**
	 * The prompt message. If not provided, the prompt message will be generated by the validation rule.
	 */
	help?: AntFormItemProps["help"];
	/**
	 * The result of the validation rules
	 */
	validateStatus?: "error" | "";
	/**
	 * Controls wheter the input can be interacted with or not.
	 * This differs from setting `disabled` to `true` in that by
	 * setting this option to true will remove any styling from the
	 * input that makes it look like an input.
	 */
	isDisplay?: boolean;
	placeholder?: AntInputProps["placeholder"];
	onClick?: AntInputProps["onClick"];
	type?: AntInputProps["type"];
	addonBefore?: AntInputProps["addonBefore"];
	suffix?: AntInputProps["suffix"];
	className?: AntInputProps["className"];
	labelClassName?: AntInputProps["className"];
	children?: AntInputProps["children"];
	value?: AntInputProps["value"];
	rules?: AntFormItemProps["rules"];
	disabled?: boolean;
	required?: boolean;
	/**
	 * Specifies the increment step for number inputs
	 */
	step?: string;
	/**
	 * Specifies the locale used for the input wich affects the decimal seperator
	 */
	lang?: string;
}

export const FormItem = ({
	label,
	name,
	description,
	children,
	value,
	hasFeedback,
	validateStatus,
	help,
	rules,
	labelClassName,
	isDisplay = false,
	disabled = false,
	required = false,
}: FormItemProps) => {
	if (isDisplay) {
		return (
			<Form.Item label={label} className="font-bold text-base">
				<div className="font-medium text-base pt-2 pb-4">{value}</div>
			</Form.Item>
		);
	}

	const className = classNames([
		"font-bold text-base mb-7",
		disabled && "text-neutral-60/40",
		hasFeedback && validateStatus === "error" && "border-error",
		labelClassName,
	]);

	return (
		<Form.Item
			label={label}
			help={help}
			hasFeedback={hasFeedback}
			validateStatus={validateStatus}
			required={required}
			className={className}
		>
			{description && <div className="font-normal text-sm mt-0 mb-[10px]">{description}</div>}
			<Form.Item name={name} className="mb-0" rules={rules}>
				{children}
			</Form.Item>
		</Form.Item>
	);
};
